webpackJsonp([3],{1842:function(e,n,t){var r=t(0),a=t(49),o=t(1227).PageRenderer;o.__esModule&&(o=o.default);var p=a({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:t(1868)}},componentWillMount:function(){},render:function(){return r.createElement(o,Object.assign({},this.props,{content:this.state.content}))}});p.__catalog_loader__=!0,e.exports=p},1868:function(e,n){e.exports="# Input\n`Input` represents an HTML `<input>` element with `type` set to any text type, but not `checkbox` or `radio`.\n\n### A note on props\n`Input` will pass all the props down to the underlying element, except for `meta` and `input`, which are common props injected by redux-form's `Field`. These are also the default ways to pass error messages, success and id to the input (c.f. `Field`'s documentation).\n\nA `className` prop will be added (but not replace) the main css class.\n\n### Examples\nDefault input:\n```react\n<Input />\n```\n\nInput with `type` email and a placeholder:\n```react\n<Input type=\"email\" placeholder=\"Enter your e-mail\" />\n```\n\nInput with `read-only` attribute:\n```react\n<Input readOnly />\n```\n\nInput with `onChange` handler:\n```react\n<Input onChange={ev => alert(ev.target.value)} />\n```\n\nInput with error:\n```react\n<Input meta={{ touched: true, error: true }} />\n```\n\nInput with error message:\n```react\n<Input meta={{ touched: true, error: 'Oops! You messed up.' }} />\n```\n\nInput with success:\n```react\n<Input meta={{ touched: true }} />\n```\n"}});
//# sourceMappingURL=3.dd47d534.chunk.js.map